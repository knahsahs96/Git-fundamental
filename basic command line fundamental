# check version
-> git --version

# set global config values(other developer can se who is making the changes)
-> git config --global user.name "pratik kumar"
-> git config --global user.email "pratik@gmail.com"
-> git comfig --list (return all conguration values)

# for help
git help <verb> (git help config)
git <verb> --help(git config --help)

Two common scenerios
1. when you have existing project in local and you want to start tracking using git

workflow
-> git init (initialize a repository from existing code)
-> git status (displays the state of the working directory and the staging area)
-> touch .gitignore (add gitignore file - in this file we include those file that we don't want to track)

(* now we are in working directory and git status list those file in working directory)

-> git add -A (add all files to staging area) or
-> git add filename (add specific file to staging area)

* if we want to remove file from staging area
-> git reset (remove all the file from staging area and add into untracked file)
-> git reset filename (remove specfic file from staging area and add into untracked file)

commit the changes
-> git commit -m "message"
-> git log (allows you to view information about previous commits that have occured in the project)

2). we want to track existing remote project

1. clone a remote repo
-> git clone <url> <where to clone>
   git clone https://github.com/pratik-iiitkalyani/git-fundamental.git .
   
2. viewing the information about remote repo
-> git remote -v (tell the infoemation about repo - where it is locally)
-> git branch -a (list all the branches in repo (both locally and remotelly )

3. commit changes
-> git diff (show the changes that we have made to the code)
-> git status
-> git add ./git add -A
-> git commit -m "message"

4. push to the remote repo
-> git pull origin master (pull the changes made after cloning of the repo)
-> git push origin master (push the changes to the master branch)





